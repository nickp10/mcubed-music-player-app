<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:controls="clr-namespace:mCubed.Controls">

	<!-- Up Arrow Path -->
	<Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}" x:Key="UpArrowPath">
		<Setter Property="Data" Value="M 0 7 L 7 7 L 3.5 3.5 Z"/>
		<Setter Property="Fill" Value="Black"/>
	</Style>
	
	<!-- Right Arrow Path -->
	<Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}" x:Key="RightArrowPath">
		<Setter Property="Data" Value="M 0 0 L 0 7 L 3.5 3.5 Z"/>
		<Setter Property="Fill" Value="Black"/>
	</Style>

	<!-- Left Arrow Path -->
	<Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}" x:Key="LeftArrowPath">
		<Setter Property="Data" Value="M 7 0 L 7 7 L 3.5 3.5 Z"/>
		<Setter Property="Fill" Value="Black"/>
	</Style>

	<!-- Down Arrow Path -->
	<Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}" x:Key="DownArrowPath">
		<Setter Property="Data" Value="M 0 0 L 7 0 L 3.5 3.5 Z"/>
		<Setter Property="Fill" Value="Black"/>
	</Style>

	<!-- Check X Path -->
	<Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}" x:Key="CheckXPath">
		<Setter Property="Data" Value="M 0 0 L 7 7 M 0 7 L 7 0"/>
		<Setter Property="Stroke" Value="Black"/>
		<Setter Property="StrokeThickness" Value="2"/>
	</Style>

	<!-- Check Mark Path -->
	<Style TargetType="{x:Type Path}" BasedOn="{StaticResource {x:Type Path}}" x:Key="CheckMarkPath">
		<Setter Property="Data" Value="M 0 3.5 L 2.3 7 L 7 0"/>
		<Setter Property="Stroke" Value="Black"/>
		<Setter Property="StrokeThickness" Value="2"/>
	</Style>

	<!-- Border -->
	<Style TargetType="{x:Type Border}">
		<Setter Property="Background" Value="White"/>
		<Setter Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="CornerRadius" Value="5"/>
	</Style>

	<!-- Menu Item Separator -->
	<Style TargetType="{x:Type Separator}" x:Key="{x:Static MenuItem.SeparatorStyleKey}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Separator">
					<Border Style="{StaticResource {x:Type Border}}" Margin="4" BorderBrush="{DynamicResource DisabledForeground}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Menu Header -->
	<ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}">
		<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent">
			<Grid>
				<ContentPresenter Margin="5" ContentSource="Header" RecognizesAccessKey="True"/>
				<Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
					<Border x:Name="SubmenuBorder" Style="{StaticResource {x:Type Border}}">
						<StackPanel IsItemsHost="True"/>
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Menu Item -->
	<ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}">
		<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent">
			<ContentPresenter Margin="5" ContentSource="Header" RecognizesAccessKey="True" />
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Menu Subheader -->
	<ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}">
		<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent" Padding="0,4">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="15"/>
					<ColumnDefinition Width="*" SharedSizeGroup="HeaderText"/>
					<ColumnDefinition Width="15"/>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
					<ColumnDefinition Width="15"/>
				</Grid.ColumnDefinitions>
				<ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
				<TextBlock x:Name="InputGestureText" Grid.Column="3" Text="{TemplateBinding InputGestureText}" HorizontalAlignment="Right"/>
				<Path x:Name="Path" Grid.Column="4" Style="{DynamicResource RightArrowPath}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
				<Popup x:Name="Popup" Placement="Right" HorizontalOffset="-5" VerticalOffset="-6" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
					<Border x:Name="SubmenuBorder" Style="{StaticResource {x:Type Border}}">
						<StackPanel IsItemsHost="True"/>
					</Border>
				</Popup>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
				<Setter TargetName="Path" Property="Fill" Value="{DynamicResource DisabledForeground}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Menu Subitem -->
	<ControlTemplate TargetType="{x:Type MenuItem}" x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}">
		<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent" Padding="0,4">
			<Grid>
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="15"/>
					<ColumnDefinition Width="*" SharedSizeGroup="HeaderText"/>
					<ColumnDefinition Width="15"/>
					<ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
					<ColumnDefinition Width="15"/>
				</Grid.ColumnDefinitions>
				<ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True"/>
				<TextBlock x:Name="InputGestureText" Grid.Column="3" Text="{TemplateBinding InputGestureText}" HorizontalAlignment="Right"/>
			</Grid>
		</Border>
		<ControlTemplate.Triggers>
			<Trigger Property="IsHighlighted" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!-- Context Menu / Right-click Menu -->
	<Style TargetType="{x:Type ContextMenu}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ContextMenu}">
					<Border x:Name="Border" Style="{StaticResource {x:Type Border}}">
						<StackPanel IsItemsHost="True"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Button Base -->
	<Style TargetType="{x:Type ButtonBase}">
		<Setter Property="Background" Value="White"/>
		<Setter Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
		<Setter Property="Padding" Value="2"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ButtonBase}">
					<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Padding="{TemplateBinding Padding}">
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True"/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="IsKeyboardFocused" Value="True">
				<Setter Property="Background" Value="{DynamicResource SelectorBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SelectorOutline}" />
			</Trigger>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SelectorBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource SelectorOutline}" />
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource PressedOutline}" />
			</Trigger>
			<Trigger Property="CheckBox.IsChecked" Value="True">
				<Setter Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter Property="BorderBrush" Value="{DynamicResource PressedOutline}" />
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Button/ToggleButton -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}"/>
	<Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ButtonBase}}"/>

	<!-- Toolbar Button -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}" x:Key="{x:Static ToolBar.ButtonStyleKey}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
	</Style>

	<!-- Normal Media Action Button -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type ButtonBase}}" x:Key="NormalMediaButton">
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="Width" Value="35"/>
		<Setter Property="Height" Value="25"/>
	</Style>

	<!-- Media Action Button -->
	<Style TargetType="{x:Type Button}" BasedOn="{StaticResource NormalMediaButton}" x:Key="MediaButton">
		<Setter Property="FontFamily" Value="Webdings"/>
		<Setter Property="FontSize" Value="20"/>
	</Style>

	<!-- ProgressBar -->
	<Style TargetType="{x:Type ProgressBar}">
		<Setter Property="VerticalContentAlignment" Value="Stretch"/>
		<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
		<Setter Property="Foreground" Value="{DynamicResource PressedOutline}"/>
	</Style>

	<!-- ListBox -->
	<Style TargetType="{x:Type ListBox}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBox}">
					<Border x:Name="Border" Style="{StaticResource {x:Type Border}}">
						<ScrollViewer Focusable="False">
							<ItemsPresenter/>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledForeground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListBox Item -->
	<Style TargetType="{x:Type ListBoxItem}" x:Key="ListBoxItemBase">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListBoxItem}">
					<Border Style="{StaticResource {x:Type Border}}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Padding="2">
						<ContentPresenter/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemBase}">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Style.Triggers>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="controls:SelectorExtension.IsSelectable" Value="True"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background" Value="{DynamicResource SelectorBrush}"/>
					<Setter Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
				</MultiTrigger.Setters>
			</MultiTrigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="True"/>
					<Condition Property="controls:SelectorExtension.IsSelectable" Value="True"/>
				</MultiTrigger.Conditions>
				<MultiTrigger.Setters>
					<Setter Property="Background" Value="{DynamicResource PressedBrush}"/>
					<Setter Property="BorderBrush" Value="{DynamicResource PressedOutline}"/>
				</MultiTrigger.Setters>
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- ListView -->
	<Style TargetType="{x:Type ListView}">
		<Setter Property="Foreground" Value="Black"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<Border x:Name="Border" Style="{StaticResource {x:Type Border}}">
						<ScrollViewer Style="{DynamicResource {x:Static GridView.GridViewScrollViewerStyleKey}}">
							<ItemsPresenter/>
						</ScrollViewer>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource DisabledForeground}"/>
						</Trigger>
						<Trigger Property="IsGrouping" Value="True">
							<Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ListView Item -->
	<Style TargetType="{x:Type ListViewItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListViewItem}">
					<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent">
						<GridViewRowPresenter />
					</Border>
					<ControlTemplate.Triggers>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsMouseOver" Value="True"/>
								<Condition Property="controls:SelectorExtension.IsSelectable" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
								<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
							</MultiTrigger.Setters>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="IsSelected" Value="True"/>
								<Condition Property="controls:SelectorExtension.IsSelectable" Value="True"/>
							</MultiTrigger.Conditions>
							<MultiTrigger.Setters>
								<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}"/>
								<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}"/>
							</MultiTrigger.Setters>
						</MultiTrigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Style.Triggers>
			<Trigger Property="controls:SelectorExtension.IsGridViewRow" Value="False">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type ListViewItem}">
							<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent">
								<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
											   VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
							</Border>
							<ControlTemplate.Triggers>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsMouseOver" Value="True"/>
										<Condition Property="controls:SelectorExtension.IsSelectable" Value="True"/>
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
										<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
									</MultiTrigger.Setters>
								</MultiTrigger>
								<MultiTrigger>
									<MultiTrigger.Conditions>
										<Condition Property="IsSelected" Value="True"/>
										<Condition Property="controls:SelectorExtension.IsSelectable" Value="True"/>
									</MultiTrigger.Conditions>
									<MultiTrigger.Setters>
										<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}"/>
										<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}"/>
									</MultiTrigger.Setters>
								</MultiTrigger>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- ComboBox -->
	<ControlTemplate TargetType="{x:Type ToggleButton}" x:Key="ComboBoxToggleButton">
		<Grid>
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="*"/>
				<ColumnDefinition Width="20"/>
			</Grid.ColumnDefinitions>
			<Border x:Name="Border" Grid.ColumnSpan="2" Style="{StaticResource {x:Type Border}}"/>
			<Path x:Name="Arrow" Grid.Column="1" Style="{DynamicResource DownArrowPath}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
		</Grid>
		<ControlTemplate.Triggers>
			<Trigger Property="ToggleButton.IsMouseOver" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
			</Trigger>
			<Trigger Property="ToggleButton.IsChecked" Value="True">
				<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBrush}" />
				<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource PressedOutline}"/>
			</Trigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
				<Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource DisabledForeground}" />
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>
	<Style TargetType="{x:Type ComboBox}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBox}">
					<Grid>
						<ToggleButton x:Name="ToggleButton" Template="{StaticResource ComboBoxToggleButton}" Focusable="False" ClickMode="Press"
								    IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
						<ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}" 
									   ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
									   Margin="3,3,23,3" VerticalAlignment="Center" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" />
						<TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" VerticalAlignment="Center" HorizontalAlignment="Left"
							    Background="Transparent" BorderThickness="0" Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"/>
						<Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Slide">
							<Grid x:Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
								<Border x:Name="DropDownBorder" Style="{StaticResource {x:Type Border}}"/>
								<ScrollViewer Focusable="False">
									<ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained"/>
								</ScrollViewer>
							</Grid>
						</Popup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="HasItems" Value="False">
							<Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
						</Trigger>
						<Trigger Property="IsEditable" Value="True">
							<Setter Property="IsTabStop" Value="False"/>
							<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible"/>
							<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
						</Trigger>
						<Trigger Property="Tag" Value="EnableHitTest">
							<Setter TargetName="ContentSite" Property="IsHitTestVisible" Value="True"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- ComboBox Item -->
	<Style TargetType="{x:Type ComboBoxItem}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ComboBoxItem}">
					<Border x:Name="Border" Style="{StaticResource {x:Type Border}}" Background="Transparent" BorderBrush="Transparent" Padding="2">
						<ContentPresenter/>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsHighlighted" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource SelectorBrush}"/>
							<Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- Custom Hover Item -->
	<Style TargetType="{x:Type Border}" BasedOn="{StaticResource {x:Type Border}}" x:Key="HoverItem">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Style.Triggers>
			<Trigger Property="IsMouseOver" Value="True">
				<Setter Property="Background" Value="{DynamicResource SelectorBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- Custom Auto-Complete Item -->
	<Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemBase}" x:Key="AutoCompleteItem">
		<Setter Property="Focusable" Value="False"/>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Style.Triggers>
			<Trigger Property="controls:SelectorExtension.IsSelectable" Value="True">
				<Setter Property="Background" Value="{DynamicResource PressedBrush}"/>
				<Setter Property="BorderBrush" Value="{DynamicResource PressedOutline}"/>
			</Trigger>
		</Style.Triggers>
	</Style>

	<!-- TreeView -->
	<!--<Style x:Key="{x:Type TreeView}" TargetType="TreeView">
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeView">
					<Border Name="Border" CornerRadius="4" Background="White" BorderBrush="{DynamicResource SelectorOutline}" BorderThickness="1" >
						<ScrollViewer Focusable="False" CanContentScroll="False" Padding="4" Name="ScrollViewer" VerticalScrollBarVisibility="Visible">
							<ItemsPresenter/>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

	<!-- TreeView Item -->
	<!--<Style x:Key="{x:Type TreeViewItem}" TargetType="TreeViewItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="TreeViewItem">
					<Grid>
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="10" MaxWidth="10"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto"/>
							<RowDefinition/>
						</Grid.RowDefinitions>
						<Border x:Name="Bd" Grid.ColumnSpan="2" CornerRadius="4" Background="Transparent" BorderBrush="Transparent" BorderThickness="1" Padding="{TemplateBinding Padding}">
							<WrapPanel>
								<Path x:Name="ExpanderPath" Width="15" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="1,1,1,1" Fill="#444" Data="M 0 4 L 8 4 L 4 8 Z"/>
								<ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
							</WrapPanel>
						</Border>
						<ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1" Visibility="Visible"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsExpanded" Value="false">
							<Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
							<Setter TargetName="ExpanderPath" Property="Data" Value="M 4 0 L 8 4 L 4 8 Z"/>
						</Trigger>
						<Trigger Property="HasItems" Value="false">
							<Setter TargetName="ExpanderPath" Property="Visibility" Value="Hidden"/>
						</Trigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Width" Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
						</MultiTrigger>
						<MultiTrigger>
							<MultiTrigger.Conditions>
								<Condition Property="HasHeader" Value="false"/>
								<Condition Property="Height" Value="Auto"/>
							</MultiTrigger.Conditions>
							<Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
						</MultiTrigger>
						<Trigger SourceName="Bd" Property="IsMouseOver" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource SelectorBrush}"/>
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource SelectorOutline}"/>
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource PressedBrush}"/>
							<Setter TargetName="Bd" Property="BorderBrush" Value="{DynamicResource PressedOutline}"/>
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForeground}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>-->

</ResourceDictionary>